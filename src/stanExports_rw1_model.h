// Generated by rstantools.  Do not edit by hand.

/*
    walker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    licence is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with licence.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_rw1_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 140> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 74, column 2 to column 33)",
  " (in 'string', line 75, column 2 to column 24)",
  " (in 'string', line 78, column 2 to column 21)",
  " (in 'string', line 79, column 2 to column 22)",
  " (in 'string', line 92, column 2 to column 18)",
  " (in 'string', line 93, column 2 to column 20)",
  " (in 'string', line 94, column 2 to column 22)",
  " (in 'string', line 95, column 2 to column 28)",
  " (in 'string', line 81, column 4 to column 31)",
  " (in 'string', line 82, column 4 to column 32)",
  " (in 'string', line 80, column 16 to line 83, column 3)",
  " (in 'string', line 80, column 2 to line 83, column 3)",
  " (in 'string', line 99, column 5 to column 55)",
  " (in 'string', line 98, column 16 to line 100, column 3)",
  " (in 'string', line 98, column 2 to line 100, column 3)",
  " (in 'string', line 103, column 6 to column 56)",
  " (in 'string', line 102, column 18 to line 104, column 5)",
  " (in 'string', line 102, column 4 to line 104, column 5)",
  " (in 'string', line 101, column 23 to line 105, column 3)",
  " (in 'string', line 101, column 2 to line 105, column 3)",
  " (in 'string', line 108, column 4 to column 73)",
  " (in 'string', line 107, column 16 to line 109, column 3)",
  " (in 'string', line 107, column 2 to line 109, column 3)",
  " (in 'string', line 111, column 2 to column 104)",
  " (in 'string', line 115, column 4 to column 77)",
  " (in 'string', line 114, column 16 to line 116, column 3)",
  " (in 'string', line 114, column 2 to line 116, column 3)",
  " (in 'string', line 121, column 6 to column 58)",
  " (in 'string', line 120, column 18 to line 122, column 5)",
  " (in 'string', line 120, column 4 to line 122, column 5)",
  " (in 'string', line 124, column 6 to column 84)",
  " (in 'string', line 126, column 8 to column 66)",
  " (in 'string', line 125, column 20 to line 127, column 7)",
  " (in 'string', line 125, column 6 to line 127, column 7)",
  " (in 'string', line 123, column 28 to line 128, column 5)",
  " (in 'string', line 123, column 4 to line 128, column 5)",
  " (in 'string', line 129, column 4 to column 94)",
  " (in 'string', line 119, column 17 to line 130, column 3)",
  " (in 'string', line 119, column 2 to line 130, column 3)",
  " (in 'string', line 86, column 2 to column 45)",
  " (in 'string', line 87, column 2 to column 45)",
  " (in 'string', line 88, column 2 to column 87)",
  " (in 'string', line 56, column 2 to column 17)",
  " (in 'string', line 57, column 2 to column 17)",
  " (in 'string', line 58, column 9 to column 10)",
  " (in 'string', line 58, column 12 to column 13)",
  " (in 'string', line 58, column 2 to column 20)",
  " (in 'string', line 59, column 9 to column 10)",
  " (in 'string', line 59, column 2 to column 14)",
  " (in 'string', line 60, column 9 to column 10)",
  " (in 'string', line 60, column 2 to column 22)",
  " (in 'string', line 61, column 9 to column 10)",
  " (in 'string', line 61, column 2 to column 20)",
  " (in 'string', line 62, column 9 to column 14)",
  " (in 'string', line 62, column 2 to column 27)",
  " (in 'string', line 63, column 9 to column 14)",
  " (in 'string', line 63, column 2 to column 25)",
  " (in 'string', line 64, column 2 to column 21)",
  " (in 'string', line 65, column 9 to column 10)",
  " (in 'string', line 65, column 12 to column 17)",
  " (in 'string', line 65, column 2 to column 28)",
  " (in 'string', line 68, column 9 to column 10)",
  " (in 'string', line 68, column 2 to column 42)",
  " (in 'string', line 69, column 9 to column 10)",
  " (in 'string', line 69, column 2 to column 38)",
  " (in 'string', line 70, column 2 to column 36)",
  " (in 'string', line 71, column 2 to column 32)",
  " (in 'string', line 74, column 8 to column 9)",
  " (in 'string', line 78, column 9 to column 10)",
  " (in 'string', line 79, column 9 to column 10)",
  " (in 'string', line 92, column 9 to column 10)",
  " (in 'string', line 93, column 9 to column 10)",
  " (in 'string', line 93, column 12 to column 13)",
  " (in 'string', line 94, column 9 to column 14)",
  " (in 'string', line 95, column 9 to column 10)",
  " (in 'string', line 95, column 12 to column 17)",
  " (in 'string', line 6, column 2 to column 18)",
  " (in 'string', line 7, column 2 to column 19)",
  " (in 'string', line 8, column 2 to column 20)",
  " (in 'string', line 9, column 9 to column 10)",
  " (in 'string', line 9, column 2 to column 19)",
  " (in 'string', line 10, column 9 to column 10)",
  " (in 'string', line 10, column 12 to column 13)",
  " (in 'string', line 10, column 2 to column 35)",
  " (in 'string', line 12, column 4 to column 42)",
  " (in 'string', line 13, column 4 to column 46)",
  " (in 'string', line 14, column 11 to column 12)",
  " (in 'string', line 14, column 4 to column 36)",
  " (in 'string', line 15, column 4 to column 15)",
  " (in 'string', line 16, column 4 to column 27)",
  " (in 'string', line 17, column 4 to column 41)",
  " (in 'string', line 11, column 17 to line 18, column 3)",
  " (in 'string', line 11, column 2 to line 18, column 3)",
  " (in 'string', line 19, column 3 to column 17)",
  " (in 'string', line 5, column 94 to line 20, column 3)",
  " (in 'string', line 23, column 2 to column 18)",
  " (in 'string', line 24, column 2 to column 19)",
  " (in 'string', line 25, column 9 to column 10)",
  " (in 'string', line 25, column 2 to column 19)",
  " (in 'string', line 26, column 9 to column 10)",
  " (in 'string', line 26, column 12 to column 13)",
  " (in 'string', line 26, column 2 to column 35)",
  " (in 'string', line 27, column 9 to column 10)",
  " (in 'string', line 27, column 2 to column 14)",
  " (in 'string', line 28, column 9 to column 10)",
  " (in 'string', line 28, column 2 to column 14)",
  " (in 'string', line 29, column 9 to column 10)",
  " (in 'string', line 29, column 12 to column 13)",
  " (in 'string', line 29, column 2 to column 17)",
  " (in 'string', line 30, column 9 to column 10)",
  " (in 'string', line 30, column 12 to column 15)",
  " (in 'string', line 30, column 2 to column 19)",
  " (in 'string', line 31, column 9 to column 10)",
  " (in 'string', line 31, column 2 to column 17)",
  " (in 'string', line 33, column 4 to column 40)",
  " (in 'string', line 34, column 4 to column 44)",
  " (in 'string', line 35, column 4 to column 34)",
  " (in 'string', line 36, column 4 to column 23)",
  " (in 'string', line 37, column 4 to column 40)",
  " (in 'string', line 32, column 17 to line 38, column 3)",
  " (in 'string', line 32, column 2 to line 38, column 3)",
  " (in 'string', line 39, column 2 to column 31)",
  " (in 'string', line 41, column 4 to column 23)",
  " (in 'string', line 42, column 11 to column 12)",
  " (in 'string', line 42, column 4 to column 28)",
  " (in 'string', line 43, column 4 to column 81)",
  " (in 'string', line 40, column 18 to line 44, column 3)",
  " (in 'string', line 40, column 2 to line 44, column 3)",
  " (in 'string', line 45, column 2 to column 15)",
  " (in 'string', line 46, column 2 to column 26)",
  " (in 'string', line 48, column 11 to column 12)",
  " (in 'string', line 48, column 4 to column 28)",
  " (in 'string', line 49, column 11 to column 12)",
  " (in 'string', line 49, column 4 to column 27)",
  " (in 'string', line 50, column 4 to column 28)",
  " (in 'string', line 47, column 17 to line 51, column 3)",
  " (in 'string', line 47, column 2 to line 51, column 3)",
  " (in 'string', line 52, column 2 to column 21)",
  " (in 'string', line 22, column 93 to line 53, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, T3__, stan::base_type_t<T4__>,
  stan::promote_args_t<stan::base_type_t<T5__>>>
gaussian_filter_rw_lpdf(const T0__& y_arg__, const T1__& a1_arg__,
                        const T2__& P1_arg__, const T3__& Ht, const T4__&
                        Rt_arg__, const T5__& xreg_arg__, std::ostream*
                        pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>, T3__,
                stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>>>,-1,-1>
gaussian_smoother_rw(const T0__& y_arg__, const T1__& a1_arg__, const T2__&
                     P1_arg__, const T3__& Ht, const T4__& Rt_arg__,
                     const T5__& xreg_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, T3__, stan::base_type_t<T4__>,
  stan::promote_args_t<stan::base_type_t<T5__>>>
gaussian_filter_rw_lpdf(const T0__& y_arg__, const T1__& a1_arg__,
                        const T2__& P1_arg__, const T3__& Ht, const T4__&
                        Rt_arg__, const T5__& xreg_arg__, std::ostream*
                        pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& a1 = stan::math::to_ref(a1_arg__);
  const auto& P1 = stan::math::to_ref(P1_arg__);
  const auto& Rt = stan::math::to_ref(Rt_arg__);
  const auto& xreg = stan::math::to_ref(xreg_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 77;
    n = stan::math::rows(y);
    int m = std::numeric_limits<int>::min();
    current_statement__ = 78;
    m = stan::math::rows(a1);
    local_scalar_t__ loglik = DUMMY_VAR__;
    current_statement__ = 79;
    loglik = 0.0;
    current_statement__ = 80;
    stan::math::validate_non_negative_index("x", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,1> x =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 81;
    stan::model::assign(x, a1, "assigning variable x");
    current_statement__ = 82;
    stan::math::validate_non_negative_index("P", "m", m);
    current_statement__ = 83;
    stan::math::validate_non_negative_index("P", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,-1> P =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m, m, DUMMY_VAR__);
    current_statement__ = 84;
    stan::model::assign(P, stan::math::diag_matrix(P1),
      "assigning variable P");
    current_statement__ = 93;
    for (int t = 1; t <= n; ++t) {
      local_scalar_t__ F = DUMMY_VAR__;
      current_statement__ = 85;
      F = (stan::math::quad_form(P,
             stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
               stan::model::index_uni(t)))
        + Ht);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 86;
      v = (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
        stan::math::dot_product(
          stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
            stan::model::index_uni(t)), x));
      current_statement__ = 87;
      stan::math::validate_non_negative_index("K", "m", m);
      Eigen::Matrix<local_scalar_t__,-1,1> K =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 88;
      stan::model::assign(K,
        stan::math::divide(
          stan::math::multiply(P,
            stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
              stan::model::index_uni(t))), F), "assigning variable K");
      current_statement__ = 89;
      stan::model::assign(x,
        stan::math::add(stan::model::deep_copy(x), stan::math::multiply(K, v)),
        "assigning variable x");
      current_statement__ = 90;
      stan::model::assign(P,
        stan::math::add(stan::model::deep_copy(P),
          stan::math::add(
            stan::math::multiply(
              stan::math::multiply(stan::math::minus(K),
                stan::math::transpose(K)), F), Rt)), "assigning variable P");
      current_statement__ = 91;
      loglik = (loglik - (0.5 * (stan::math::log(F) + ((v * v) / F))));
    }
    current_statement__ = 94;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>, T3__,
                stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>>>,-1,-1>
gaussian_smoother_rw(const T0__& y_arg__, const T1__& a1_arg__, const T2__&
                     P1_arg__, const T3__& Ht, const T4__& Rt_arg__,
                     const T5__& xreg_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& a1 = stan::math::to_ref(a1_arg__);
  const auto& P1 = stan::math::to_ref(P1_arg__);
  const auto& Rt = stan::math::to_ref(Rt_arg__);
  const auto& xreg = stan::math::to_ref(xreg_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 96;
    n = stan::math::rows(y);
    int m = std::numeric_limits<int>::min();
    current_statement__ = 97;
    m = stan::math::rows(a1);
    current_statement__ = 98;
    stan::math::validate_non_negative_index("x", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,1> x =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 99;
    stan::model::assign(x, a1, "assigning variable x");
    current_statement__ = 100;
    stan::math::validate_non_negative_index("P", "m", m);
    current_statement__ = 101;
    stan::math::validate_non_negative_index("P", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,-1> P =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m, m, DUMMY_VAR__);
    current_statement__ = 102;
    stan::model::assign(P, stan::math::diag_matrix(P1),
      "assigning variable P");
    current_statement__ = 103;
    stan::math::validate_non_negative_index("v", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> v =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 105;
    stan::math::validate_non_negative_index("F", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,1> F =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
    current_statement__ = 107;
    stan::math::validate_non_negative_index("K", "m", m);
    current_statement__ = 108;
    stan::math::validate_non_negative_index("K", "n", n);
    Eigen::Matrix<local_scalar_t__,-1,-1> K =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m, n, DUMMY_VAR__);
    current_statement__ = 110;
    stan::math::validate_non_negative_index("r", "m", m);
    current_statement__ = 111;
    stan::math::validate_non_negative_index("r", "n + 1", (n + 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> r =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(m, (n + 1),
        DUMMY_VAR__);
    current_statement__ = 113;
    stan::math::validate_non_negative_index("tmpr", "m", m);
    Eigen::Matrix<local_scalar_t__,-1,1> tmpr =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
    current_statement__ = 121;
    for (int t = 1; t <= n; ++t) {
      current_statement__ = 115;
      stan::model::assign(F,
        (stan::math::quad_form(P,
           stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
             stan::model::index_uni(t))) + Ht), "assigning variable F",
        stan::model::index_uni(t));
      current_statement__ = 116;
      stan::model::assign(v,
        (stan::model::rvalue(y, "y", stan::model::index_uni(t)) -
        stan::math::dot_product(
          stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
            stan::model::index_uni(t)), x)), "assigning variable v",
        stan::model::index_uni(t));
      current_statement__ = 117;
      stan::model::assign(K,
        stan::math::divide(
          stan::math::multiply(P,
            stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
              stan::model::index_uni(t))),
          stan::model::rvalue(F, "F", stan::model::index_uni(t))),
        "assigning variable K", stan::model::index_omni(),
        stan::model::index_uni(t));
      current_statement__ = 118;
      stan::model::assign(x,
        stan::math::add(stan::model::deep_copy(x),
          stan::math::multiply(
            stan::model::rvalue(K, "K", stan::model::index_omni(),
              stan::model::index_uni(t)),
            stan::model::rvalue(v, "v", stan::model::index_uni(t)))),
        "assigning variable x");
      current_statement__ = 119;
      stan::model::assign(P,
        stan::math::add(stan::model::deep_copy(P),
          stan::math::add(
            stan::math::multiply(
              stan::math::multiply(
                stan::math::minus(
                  stan::model::rvalue(K, "K", stan::model::index_omni(),
                    stan::model::index_uni(t))),
                stan::math::transpose(
                  stan::model::rvalue(K, "K", stan::model::index_omni(),
                    stan::model::index_uni(t)))),
              stan::model::rvalue(F, "F", stan::model::index_uni(t))), Rt)),
        "assigning variable P");
    }
    current_statement__ = 122;
    stan::model::assign(r, stan::math::rep_vector(0.0, m),
      "assigning variable r", stan::model::index_omni(),
      stan::model::index_uni((n + 1)));
    current_statement__ = 128;
    for (int tt = 1; tt <= n; ++tt) {
      int t = std::numeric_limits<int>::min();
      current_statement__ = 123;
      t = ((n + 1) - tt);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("tmp", "m", m);
      Eigen::Matrix<local_scalar_t__,-1,1> tmp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 125;
      stan::model::assign(tmp,
        stan::model::rvalue(r, "r", stan::model::index_omni(),
          stan::model::index_uni((t + 1))), "assigning variable tmp");
      current_statement__ = 126;
      stan::model::assign(r,
        stan::math::subtract(
          stan::math::add(
            stan::math::divide(
              stan::math::multiply(
                stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
                  stan::model::index_uni(t)),
                stan::model::rvalue(v, "v", stan::model::index_uni(t))),
              stan::model::rvalue(F, "F", stan::model::index_uni(t))), tmp),
          stan::math::multiply(
            stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
              stan::model::index_uni(t)),
            stan::math::dot_product(
              stan::model::rvalue(K, "K", stan::model::index_omni(),
                stan::model::index_uni(t)), tmp))), "assigning variable r",
        stan::model::index_omni(), stan::model::index_uni(t));
    }
    current_statement__ = 129;
    stan::model::assign(tmpr,
      stan::model::rvalue(r, "r", stan::model::index_omni(),
        stan::model::index_uni(1)), "assigning variable tmpr");
    current_statement__ = 130;
    stan::model::assign(r,
      stan::math::add(a1, stan::math::elt_multiply(P1, tmpr)),
      "assigning variable r", stan::model::index_omni(),
      stan::model::index_uni(1));
    current_statement__ = 137;
    for (int t = 2; t <= n; ++t) {
      current_statement__ = 131;
      stan::math::validate_non_negative_index("tmp", "m", m);
      Eigen::Matrix<local_scalar_t__,-1,1> tmp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 132;
      stan::model::assign(tmp,
        stan::model::rvalue(r, "r", stan::model::index_omni(),
          stan::model::index_uni((t - 1))), "assigning variable tmp");
      current_statement__ = 133;
      stan::math::validate_non_negative_index("tmp2", "m", m);
      Eigen::Matrix<local_scalar_t__,-1,1> tmp2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m, DUMMY_VAR__);
      current_statement__ = 134;
      stan::model::assign(tmp2,
        stan::model::rvalue(r, "r", stan::model::index_omni(),
          stan::model::index_uni(t)), "assigning variable tmp2");
      current_statement__ = 135;
      stan::model::assign(r,
        stan::math::add(tmp, stan::math::multiply(Rt, tmp2)),
        "assigning variable r", stan::model::index_omni(),
        stan::model::index_uni(t));
    }
    current_statement__ = 138;
    return stan::model::rvalue(r, "r", stan::model::index_min_max(1, m),
             stan::model::index_min_max(1, n));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_rw1_model final : public model_base_crtp<model_rw1_model> {
private:
  int k;
  int n;
  Eigen::Matrix<double,-1,-1> xreg_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,1> beta_mean_data__;
  Eigen::Matrix<double,-1,1> beta_sd_data__;
  Eigen::Matrix<double,-1,1> sigma_mean_data__;
  Eigen::Matrix<double,-1,1> sigma_sd_data__;
  int n_new;
  Eigen::Matrix<double,-1,-1> xreg_new_data__;
  Eigen::Matrix<double,-1,1> sigma_b_mean_data__;
  Eigen::Matrix<double,-1,1> sigma_b_sd_data__;
  double sigma_y_mean;
  double sigma_y_sd;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> beta_sd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_sd{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg_new{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_b_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_b_sd{nullptr, 0};
public:
  ~model_rw1_model() {}
  model_rw1_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_rw1_model_namespace::model_rw1_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 43;
      context__.validate_dims("data initialization", "k", "int",
        std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      current_statement__ = 43;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "k", k, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 44;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("xreg", "k", k);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("xreg", "n", n);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "xreg", "double",
        std::vector<size_t>{static_cast<size_t>(k), static_cast<size_t>(n)});
      xreg_data__ = Eigen::Matrix<double,-1,-1>::Constant(k, n,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xreg) Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_data__.data(),
        k, n);
      {
        std::vector<local_scalar_t__> xreg_flat__;
        current_statement__ = 47;
        xreg_flat__ = context__.vals_r("xreg");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(xreg, xreg_flat__[(pos__ - 1)],
              "assigning variable xreg", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 49;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("beta_mean", "k", k);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "beta_mean", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      beta_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(k,
                           std::numeric_limits<double>::quiet_NaN());
      new (&beta_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_mean_data__.data(), k);
      {
        std::vector<local_scalar_t__> beta_mean_flat__;
        current_statement__ = 51;
        beta_mean_flat__ = context__.vals_r("beta_mean");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 51;
          stan::model::assign(beta_mean, beta_mean_flat__[(pos__ - 1)],
            "assigning variable beta_mean", stan::model::index_uni(sym1__));
          current_statement__ = 51;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("beta_sd", "k", k);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "beta_sd", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      beta_sd_data__ = Eigen::Matrix<double,-1,1>::Constant(k,
                         std::numeric_limits<double>::quiet_NaN());
      new (&beta_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(beta_sd_data__.data(), k);
      {
        std::vector<local_scalar_t__> beta_sd_flat__;
        current_statement__ = 53;
        beta_sd_flat__ = context__.vals_r("beta_sd");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 53;
          stan::model::assign(beta_sd, beta_sd_flat__[(pos__ - 1)],
            "assigning variable beta_sd", stan::model::index_uni(sym1__));
          current_statement__ = 53;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("sigma_mean", "k + 1", (k + 1));
      current_statement__ = 55;
      context__.validate_dims("data initialization", "sigma_mean", "double",
        std::vector<size_t>{static_cast<size_t>((k + 1))});
      sigma_mean_data__ = Eigen::Matrix<double,-1,1>::Constant((k + 1),
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_mean_data__.data(), (k +
        1));
      {
        std::vector<local_scalar_t__> sigma_mean_flat__;
        current_statement__ = 55;
        sigma_mean_flat__ = context__.vals_r("sigma_mean");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= (k + 1); ++sym1__) {
          current_statement__ = 55;
          stan::model::assign(sigma_mean, sigma_mean_flat__[(pos__ - 1)],
            "assigning variable sigma_mean", stan::model::index_uni(sym1__));
          current_statement__ = 55;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("sigma_sd", "k + 1", (k + 1));
      current_statement__ = 57;
      context__.validate_dims("data initialization", "sigma_sd", "double",
        std::vector<size_t>{static_cast<size_t>((k + 1))});
      sigma_sd_data__ = Eigen::Matrix<double,-1,1>::Constant((k + 1),
                          std::numeric_limits<double>::quiet_NaN());
      new (&sigma_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_sd_data__.data(), (k +
        1));
      {
        std::vector<local_scalar_t__> sigma_sd_flat__;
        current_statement__ = 57;
        sigma_sd_flat__ = context__.vals_r("sigma_sd");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= (k + 1); ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(sigma_sd, sigma_sd_flat__[(pos__ - 1)],
            "assigning variable sigma_sd", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      context__.validate_dims("data initialization", "n_new", "int",
        std::vector<size_t>{});
      n_new = std::numeric_limits<int>::min();
      current_statement__ = 58;
      n_new = context__.vals_i("n_new")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "n_new", n_new, 0);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("xreg_new", "k", k);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("xreg_new", "n_new", n_new);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "xreg_new", "double",
        std::vector<size_t>{static_cast<size_t>(k),
          static_cast<size_t>(n_new)});
      xreg_new_data__ = Eigen::Matrix<double,-1,-1>::Constant(k, n_new,
                          std::numeric_limits<double>::quiet_NaN());
      new (&xreg_new)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_new_data__.data(), k,
        n_new);
      {
        std::vector<local_scalar_t__> xreg_new_flat__;
        current_statement__ = 61;
        xreg_new_flat__ = context__.vals_r("xreg_new");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= n_new; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
            current_statement__ = 61;
            stan::model::assign(xreg_new, xreg_new_flat__[(pos__ - 1)],
              "assigning variable xreg_new", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 61;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 62;
      stan::math::validate_non_negative_index("sigma_b_mean", "k", k);
      current_statement__ = 63;
      sigma_b_mean_data__ = Eigen::Matrix<double,-1,1>::Constant(k,
                              std::numeric_limits<double>::quiet_NaN());
      new (&sigma_b_mean)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_b_mean_data__.data(), k);
      current_statement__ = 63;
      stan::model::assign(sigma_b_mean,
        stan::model::rvalue(sigma_mean, "sigma_mean",
          stan::model::index_min(2)), "assigning variable sigma_b_mean");
      current_statement__ = 64;
      stan::math::validate_non_negative_index("sigma_b_sd", "k", k);
      current_statement__ = 65;
      sigma_b_sd_data__ = Eigen::Matrix<double,-1,1>::Constant(k,
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_b_sd)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_b_sd_data__.data(), k);
      current_statement__ = 65;
      stan::model::assign(sigma_b_sd,
        stan::model::rvalue(sigma_sd, "sigma_sd", stan::model::index_min(2)),
        "assigning variable sigma_b_sd");
      current_statement__ = 66;
      sigma_y_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 66;
      sigma_y_mean = stan::model::rvalue(sigma_mean, "sigma_mean",
                       stan::model::index_uni(1));
      current_statement__ = 67;
      sigma_y_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 67;
      sigma_y_sd = stan::model::rvalue(sigma_sd, "sigma_sd",
                     stan::model::index_uni(1));
      current_statement__ = 68;
      stan::math::validate_non_negative_index("sigma_b", "k", k);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("R_vector", "k", k);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("P1_vector", "k", k);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("y_rep", "n", n);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("beta", "k", k);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("beta", "n", n);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("y_new", "n_new", n_new);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("beta_new", "k", k);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("beta_new", "n_new", n_new);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = k + 1;
  }
  inline std::string model_name() const final {
    return "model_rw1_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_rw1_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> sigma_b =
        std::vector<local_scalar_t__>(k, DUMMY_VAR__);
      current_statement__ = 1;
      sigma_b = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, k);
      local_scalar_t__ sigma_y = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_y = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> R_vector =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> P1_vector =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 12;
      for (int i = 1; i <= k; ++i) {
        current_statement__ = 9;
        stan::model::assign(R_vector,
          stan::math::pow(
            stan::model::rvalue(sigma_b, "sigma_b", stan::model::index_uni(i)),
            2), "assigning variable R_vector", stan::model::index_uni(i));
        current_statement__ = 10;
        stan::model::assign(P1_vector,
          stan::math::pow(
            stan::model::rvalue(beta_sd, "beta_sd", stan::model::index_uni(i)),
            2), "assigning variable P1_vector", stan::model::index_uni(i));
      }
      {
        current_statement__ = 40;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_b,
                         sigma_b_mean, sigma_b_sd));
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_y,
                         sigma_y_mean, sigma_y_sd));
        current_statement__ = 42;
        lp_accum__.add(gaussian_filter_rw_lpdf<propto__>(y, beta_mean,
                         P1_vector, stan::math::pow(sigma_y, 2),
                         stan::math::diag_matrix(R_vector), xreg, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_rw1_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> sigma_b =
        std::vector<double>(k, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      sigma_b = in__.template read_constrain_lb<
                  std::vector<local_scalar_t__>, jacobian__>(0, lp__, k);
      double sigma_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_y = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> R_vector =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> P1_vector =
        Eigen::Matrix<double,-1,1>::Constant(k,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma_b);
      out__.write(sigma_y);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 12;
      for (int i = 1; i <= k; ++i) {
        current_statement__ = 9;
        stan::model::assign(R_vector,
          stan::math::pow(
            stan::model::rvalue(sigma_b, "sigma_b", stan::model::index_uni(i)),
            2), "assigning variable R_vector", stan::model::index_uni(i));
        current_statement__ = 10;
        stan::model::assign(P1_vector,
          stan::math::pow(
            stan::model::rvalue(beta_sd, "beta_sd", stan::model::index_uni(i)),
            2), "assigning variable P1_vector", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(R_vector);
        out__.write(P1_vector);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> y_rep =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> beta =
        Eigen::Matrix<double,-1,-1>::Constant(k, n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_new =
        Eigen::Matrix<double,-1,1>::Constant(n_new,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> beta_new =
        Eigen::Matrix<double,-1,-1>::Constant(k, n_new,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      for (int i = 1; i <= k; ++i) {
        current_statement__ = 13;
        stan::model::assign(beta,
          stan::math::normal_rng(
            stan::model::rvalue(beta_mean, "beta_mean",
              stan::model::index_uni(i)),
            stan::model::rvalue(beta_sd, "beta_sd", stan::model::index_uni(i)),
            base_rng__), "assigning variable beta",
          stan::model::index_uni(i), stan::model::index_uni(1));
      }
      current_statement__ = 20;
      for (int t = 1; t <= (n - 1); ++t) {
        current_statement__ = 18;
        for (int i = 1; i <= k; ++i) {
          current_statement__ = 16;
          stan::model::assign(beta,
            stan::math::normal_rng(
              stan::model::rvalue(beta, "beta", stan::model::index_uni(i),
                stan::model::index_uni(t)),
              stan::model::rvalue(sigma_b, "sigma_b",
                stan::model::index_uni(i)), base_rng__),
            "assigning variable beta", stan::model::index_uni(i),
            stan::model::index_uni((t + 1)));
        }
      }
      current_statement__ = 23;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 21;
        stan::model::assign(y_rep,
          stan::math::normal_rng(
            stan::math::dot_product(
              stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
                stan::model::index_uni(t)),
              stan::model::rvalue(beta, "beta",
                stan::model::index_min_max(1, k), stan::model::index_uni(t))),
            sigma_y, base_rng__), "assigning variable y_rep",
          stan::model::index_uni(t));
      }
      current_statement__ = 24;
      stan::model::assign(beta,
        stan::math::add(stan::model::deep_copy(beta),
          gaussian_smoother_rw(stan::math::subtract(y, y_rep), beta_mean,
            P1_vector, stan::math::pow(sigma_y, 2),
            stan::math::diag_matrix(R_vector), xreg, pstream__)),
        "assigning variable beta");
      current_statement__ = 27;
      for (int t = 1; t <= n; ++t) {
        current_statement__ = 25;
        stan::model::assign(y_rep,
          (stan::math::dot_product(
             stan::model::rvalue(xreg, "xreg", stan::model::index_omni(),
               stan::model::index_uni(t)),
             stan::model::rvalue(beta, "beta",
               stan::model::index_min_max(1, k), stan::model::index_uni(t)))
          + stan::math::normal_rng(0, sigma_y, base_rng__)),
          "assigning variable y_rep", stan::model::index_uni(t));
      }
      current_statement__ = 39;
      if (stan::math::logical_gt(n_new, 0)) {
        current_statement__ = 30;
        for (int i = 1; i <= k; ++i) {
          current_statement__ = 28;
          stan::model::assign(beta_new,
            stan::math::normal_rng(
              stan::model::rvalue(beta, "beta", stan::model::index_uni(i),
                stan::model::index_uni(n)),
              stan::model::rvalue(sigma_b, "sigma_b",
                stan::model::index_uni(i)), base_rng__),
            "assigning variable beta_new", stan::model::index_uni(i),
            stan::model::index_uni(1));
        }
        current_statement__ = 36;
        for (int t = 1; t <= (n_new - 1); ++t) {
          current_statement__ = 31;
          stan::model::assign(y_new,
            (stan::math::dot_product(
               stan::model::rvalue(xreg_new, "xreg_new",
                 stan::model::index_omni(), stan::model::index_uni(t)),
               stan::model::rvalue(beta_new, "beta_new",
                 stan::model::index_omni(), stan::model::index_uni(t))) +
            stan::math::normal_rng(0, sigma_y, base_rng__)),
            "assigning variable y_new", stan::model::index_uni(t));
          current_statement__ = 34;
          for (int i = 1; i <= k; ++i) {
            current_statement__ = 32;
            stan::model::assign(beta_new,
              stan::math::normal_rng(
                stan::model::rvalue(beta_new, "beta_new",
                  stan::model::index_uni(i), stan::model::index_uni(t)),
                stan::model::rvalue(sigma_b, "sigma_b",
                  stan::model::index_uni(i)), base_rng__),
              "assigning variable beta_new", stan::model::index_uni(i),
              stan::model::index_uni((t + 1)));
          }
        }
        current_statement__ = 37;
        stan::model::assign(y_new,
          (stan::math::dot_product(
             stan::model::rvalue(xreg_new, "xreg_new",
               stan::model::index_omni(), stan::model::index_uni(n_new)),
             stan::model::rvalue(beta_new, "beta_new",
               stan::model::index_omni(), stan::model::index_uni(n_new))) +
          stan::math::normal_rng(0, sigma_y, base_rng__)),
          "assigning variable y_new", stan::model::index_uni(n_new));
      }
      out__.write(y_rep);
      out__.write(beta);
      out__.write(y_new);
      out__.write(beta_new);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> sigma_b =
        std::vector<local_scalar_t__>(k, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(sigma_b,
        in__.read<std::vector<local_scalar_t__>>(k),
        "assigning variable sigma_b");
      out__.write_free_lb(0, sigma_b);
      local_scalar_t__ sigma_y = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_y = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma_b",
        "double", std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_y",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> sigma_b =
        std::vector<local_scalar_t__>(k, DUMMY_VAR__);
      current_statement__ = 1;
      sigma_b = context__.vals_r("sigma_b");
      out__.write_free_lb(0, sigma_b);
      local_scalar_t__ sigma_y = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_y = context__.vals_r("sigma_y")[(1 - 1)];
      out__.write_free_lb(0, sigma_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma_b", "sigma_y"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"R_vector", "P1_vector"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_rep", "beta", "y_new", "beta_new"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(k)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(k)},
             std::vector<size_t>{static_cast<size_t>(k)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(k),
               static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n_new)},
             std::vector<size_t>{static_cast<size_t>(k),
               static_cast<size_t>(n_new)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        param_names__.emplace_back(std::string() + "R_vector" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        param_names__.emplace_back(std::string() + "P1_vector" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_new; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_new" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_b" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        param_names__.emplace_back(std::string() + "R_vector" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        param_names__.emplace_back(std::string() + "P1_vector" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_new; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_new" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_new; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta_new" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"P1_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(k) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_new) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(k) + ",\"cols\":" + std::to_string(n_new) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(k) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"R_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"P1_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(k) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_new\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_new) + "},\"block\":\"generated_quantities\"},{\"name\":\"beta_new\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(k) + ",\"cols\":" + std::to_string(n_new) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (k + 1);
    const size_t num_transformed = emit_transformed_parameters * ((k + k));
    const size_t num_gen_quantities = emit_generated_quantities * ((((n + (k
      * n)) + n_new) + (k * n_new)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (k + 1);
    const size_t num_transformed = emit_transformed_parameters * ((k + k));
    const size_t num_gen_quantities = emit_generated_quantities * ((((n + (k
      * n)) + n_new) + (k * n_new)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_rw1_model_namespace::model_rw1_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_rw1_model_namespace::profiles__;
}
#endif
#endif
